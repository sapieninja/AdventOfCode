from collections import *
import itertools 
import random
import re
import sys
import aoc_utils
import queue
from operator import *
import functools
import math
from copy import deepcopy
inputs = aoc_utils.readlines()
time = int(inputs[0])
buses = [int(x) for x in inputs[1].split(',') if x != 'x']
minimum = 10000000000000000000000000000000000000000000
bus  = 0
for x in buses:
    print(x - time%x)
    print(minimum)
    if x - time%x <= minimum:
        minimum = x - time%x
        bus = x
bus_list = inputs[1].split(',')
print(bus_list)
print(bus*minimum)
def lcmish(bus_list):
    #look for the place where x*a=y*b+yoffset
    #if x*a + yoffset < y*b increment a
    #otherwise increment b
    mu = [1 for x in bus_list if x!="x"]
    bus_agents = [(x,bus_list.index(x)) for x in bus_list if x != "x"]
    print(bus_agents)
    def newmult(x,y,a,b,yoffset):
        #we want to prioritise changing a
        #then only change b if necessary
        #this will reduce computation time/get us the right answer idk 
        #it is always possible to reach the right answer by changing a unless y is a multiple of x
        #if y were a multiple of x this would be impossible
        cd = y*b - x*a
        #i want to change a, which would reduce the current difference by units of x such as thingy, until the current difference is equal to cd
        #if this is not possible y will have to be changed instead
        donehere = False
        if cd%x == yoffset%x:
            a += cd%x
            donehere = True
        #i can instead change y by units of current difference with the goal of making it possible for a working a to be set
        #i want to make b such that cd%x == yoffset%x
        else:
            aim = yoffset%x
            current = cd%x
            #as i increment b cd%x is increased by y%x (until it reaches x when it wraps around)
            difference = aim - current 
            #if difference +b is simply the difference
            #otherwise it is x - the difference
            #we want to know how many units of y%x we need to add to get the difference
            #if difference is positive it is simply difference//(y%x)
            #however if difference is negative it is instead x+difference//y
            bplus = 1
            while True:
                if(y*(b+bplus) - x*a)%x == yoffset%x:
                    b+=bplus
                    break
                b+= 1
        if not donehere:a += cd%x
        return (a,b)
    while True:
        oldmu = deepcopy(mu)
        for x in range(len(bus_agents) -1):
            mu[x],mu[x+1] = newmult(int(bus_agents[x][0]),int(bus_agents[x+1][0]),mu[x],mu[x+1],bus_agents[x+1][1]-bus_agents[x][1])
        print(mu)
        if mu == oldmu:
            print(int(bus_agents[0][0])*mu[0])
            break
lcmish(bus_list)
